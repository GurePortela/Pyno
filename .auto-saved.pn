[{'x': 556, 'size': (300, 150), 'connects': [{'output': {'put': {'name': 'output'}, 'node': 2}, 'input': {'put': {'name': 'a'}}}, {'output': {'put': {'name': 'output'}, 'node': 4}, 'input': {'put': {'name': 'b'}}}], 'parent': 1, 'y': 411, 'type': 'node', 'code': 'def add(a=0, b=0):\n  result = a + b\n  return result', 'color': (100, 130, 117)}, {'x': 499, 'size': (70, 30), 'connects': [], 'parent': 2, 'y': 520, 'type': 'field', 'code': '5'}, {'x': 202, 'size': (350, 496), 'connects': [], 'parent': 3, 'y': 327, 'type': 'field', 'code': '#\n#         Welcome to Pyno!\n#\n#  Pyno is a visual programming env\n# based on Python\n#\n#  You can find info and tutorials\n# at https://github.com/honix/Pyno\n#\n#\n#         Basic controls\n#\n# Create - Node   press N\n#        - Field  press F\n#\n# Pan    - right-mouse-button drag\n#\n# Zoom   - mouse wheel\n#\n#    ____\n#   |  _ \\ _   _  ____   ___\n#   | (_) ) | | ||  _ \\ / _ \\\n#   |  __/| |_| || | | | (_) )\n#   |_|   \\___  ||_| |_|\\___/\n#          (___/\n#'}, {'x': 618, 'size': (70, 30), 'connects': [], 'parent': 4, 'y': 521, 'type': 'field', 'code': '20'}, {'x': 481, 'size': (70, 30), 'connects': [{'output': {'put': {'name': 'result'}, 'node': 1}, 'input': {'put': {'name': 'input'}}}], 'parent': 5, 'y': 291, 'type': 'field', 'code': '25'}, {'x': 640, 'size': (300, 150), 'connects': [{'output': {'put': {'name': 'result'}, 'node': 1}, 'input': {'put': {'name': 'a'}}}, {'output': {'put': {'name': 'output'}, 'node': 7}, 'input': {'put': {'name': 'b'}}}], 'parent': 6, 'y': 290, 'type': 'node', 'code': 'def devide(a=0, b=0):\n  result = a // b\n  return result', 'color': (116, 127, 128)}, {'x': 696, 'size': (70, 30), 'connects': [], 'parent': 7, 'y': 409, 'type': 'field', 'code': '5'}, {'x': 640, 'size': (70, 30), 'connects': [{'output': {'put': {'name': 'result'}, 'node': 6}, 'input': {'put': {'name': 'input'}}}], 'parent': 8, 'y': 168, 'type': 'field', 'code': '5'}, {'x': 1038, 'size': (170, 30), 'connects': [], 'parent': 9, 'y': 485, 'type': 'field', 'code': 'lambda x: x - 5'}, {'x': 1336, 'size': (129, 30), 'connects': [], 'parent': 10, 'y': 481, 'type': 'field', 'code': 'range(1,10)'}, {'x': 1193, 'size': (300, 150), 'connects': [{'output': {'put': {'name': 'output'}, 'node': 10}, 'input': {'put': {'name': 'b'}}}, {'output': {'put': {'name': 'output'}, 'node': 9}, 'input': {'put': {'name': 'a'}}}], 'parent': 11, 'y': 343, 'type': 'node', 'code': 'def outOfFunction(a=None, b=()):\n    result = tuple(map(a,b))\n    return result', 'color': (84, 114, 81)}, {'x': 1159, 'size': (328, 30), 'connects': [{'output': {'put': {'name': 'result'}, 'node': 11}, 'input': {'put': {'name': 'input'}}}], 'parent': 12, 'y': 246, 'type': 'field', 'code': '(-4, -3, -2, -1, 0, 1, 2, 3, 4)'}, {'x': 845, 'size': (312, 150), 'connects': [], 'parent': 13, 'y': 140, 'type': 'node', 'code': "S['timer'] = 0\n\ndef timeSinus():\n  S['timer'] += G['dt']\n  result = math.sin(S['timer'])\n  return result", 'color': (126, 120, 86)}, {'x': 486, 'size': (149, 30), 'connects': [], 'parent': 14, 'y': 62, 'type': 'field', 'code': 'import math'}, {'x': 890, 'size': (224, 30), 'connects': [{'output': {'put': {'name': 'result'}, 'node': 13}, 'input': {'put': {'name': 'input'}}}], 'parent': 15, 'y': 43, 'type': 'field', 'code': '-0.47657433689016127'}, {'x': 1664, 'size': (326, 52), 'connects': [], 'parent': 16, 'y': 293, 'type': 'field', 'code': '# Check examples folder for more'}]