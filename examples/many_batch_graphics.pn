[{'type': 'field', 'code': 'import pyglet\nfrom math import sin, cos', 'connects': [], 'size': (288, 52), 'y': 307, 'parent': 16, 'x': 175}, {'type': 'field', 'code': 'pyglet.window.Window(550,550)', 'connects': [], 'size': (324, 30), 'y': 547, 'parent': 17, 'x': 389}, {'type': 'node', 'color': (99, 114, 116), 'connects': [{'output': {'put': {'name': 'output'}, 'node': 17}, 'input': {'put': {'name': 'window'}}}, {'output': {'put': {'name': 'output'}, 'node': 25}, 'input': {'put': {'name': 'width'}}}, {'output': {'put': {'name': 'result'}, 'node': 26}, 'input': {'put': {'name': 'xx'}}}, {'output': {'put': {'name': 'result'}, 'node': 26}, 'input': {'put': {'name': 'yy'}}}], 'size': (432, 334), 'code': "def quad(window=None, xx=[], yy=[], width=10):\n  window.switch_to()\n  window.clear()\n  batch = pyglet.graphics.Batch()\n  for x in xx:\n    for y in yy:\n      x, y = int(x), int(y)\n      batch.add_indexed(4, \n              pyglet.gl.GL_TRIANGLES,\r\n              None,\n        [0, 1, 2, 0, 2, 3],\r\n        ('v2i', (x, y,\r\n                 x + width, y,\r\n                 x + width, y + width,\r\n                 x, y + width))\r\n        )\n  batch.draw()", 'y': 62, 'parent': 18, 'x': 421}, {'type': 'node', 'color': (80, 123, 85), 'connects': [{'output': {'put': {'name': 'output'}, 'node': 20}, 'input': {'put': {'name': 'm'}}}, {'output': {'put': {'name': 'result'}, 'node': 23}, 'input': {'put': {'name': 'a'}}}], 'size': (300, 150), 'code': 'def sincos(a=0, m=1):\n  si = sin(a)*m\n  ci = cos(a)*m\n  return si, ci', 'y': 341, 'parent': 19, 'x': 546}, {'type': 'field', 'code': '18', 'connects': [], 'size': (70, 30), 'y': 425, 'parent': 20, 'x': 611}, {'type': 'node', 'color': (124, 125, 123), 'connects': [], 'size': (300, 150), 'code': "S['t'] = 0\n\ndef time():\n  S['t'] += G['dt']\n  return S['t']", 'y': 490, 'parent': 21, 'x': 452}, {'type': 'field', 'code': "'''\nThere is example of some graphics stuff\n\n'''", 'connects': [], 'size': (254, 96), 'y': 442, 'parent': 22, 'x': 167}, {'type': 'node', 'color': (84, 85, 94), 'connects': [{'output': {'put': {'name': "S['t']"}, 'node': 21}, 'input': {'put': {'name': 'a'}}}, {'output': {'put': {'name': 'output'}, 'node': 24}, 'input': {'put': {'name': 'b'}}}], 'size': (300, 150), 'code': 'def mul(a=0, b=1):\n    result = a * b\n    return result', 'y': 416, 'parent': 23, 'x': 498}, {'type': 'field', 'code': '3.00', 'connects': [], 'size': (81, 30), 'y': 491, 'parent': 24, 'x': 539}, {'type': 'field', 'code': '-17', 'connects': [{'output': {'put': {'name': 'result'}, 'node': 30}, 'input': {'put': {'name': 'input'}}}], 'size': (70, 30), 'y': 158, 'parent': 25, 'x': 633}, {'type': 'node', 'color': (117, 90, 80), 'connects': [{'output': {'put': {'name': 'output'}, 'node': 28}, 'input': {'put': {'name': 't'}}}, {'output': {'put': {'name': 'output'}, 'node': 29}, 'input': {'put': {'name': 's'}}}, {'output': {'put': {'name': 'output'}, 'node': 27}, 'input': {'put': {'name': 'f'}}}], 'size': (342, 151), 'code': 'def rangef(f=0, t=100, s=10):\n  result = list(range(f,t,s))\n  return result', 'y': 160, 'parent': 26, 'x': 493}, {'type': 'field', 'code': '45', 'connects': [], 'size': (70, 30), 'y': 263, 'parent': 27, 'x': 458}, {'type': 'field', 'code': '520', 'connects': [], 'size': (81, 30), 'y': 262, 'parent': 28, 'x': 555}, {'type': 'field', 'code': '23', 'connects': [], 'size': (70, 30), 'y': 262, 'parent': 29, 'x': 655}, {'type': 'node', 'color': (122, 86, 109), 'connects': [{'output': {'put': {'name': 'ci'}, 'node': 19}, 'input': {'put': {'name': 'a'}}}], 'size': (300, 150), 'code': 'def toInt(a=0):\n  result = int(a)\n  return result', 'y': 263, 'parent': 30, 'x': 753}]