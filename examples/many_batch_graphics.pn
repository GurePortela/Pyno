[{'x': 179, 'parent': 16, 'type': 'field', 'code': 'import pyglet\nfrom math import sin, cos', 'y': 317, 'connects': [], 'size': (272, 52)}, {'x': 401, 'parent': 17, 'type': 'field', 'code': 'pyglet.window.Window(550,550)', 'y': 545, 'connects': [], 'size': (292, 30)}, {'x': 449, 'parent': 18, 'color': (99, 114, 116), 'type': 'node', 'code': "def quad(window=None, xx=[], yy=[], width=10):\n  window.switch_to()\n  window.clear()\n  batch = pyglet.graphics.Batch()\n  for x in xx:\n    for y in yy:\n      x, y = int(x), int(y)\n      batch.add_indexed(4, \n              pyglet.gl.GL_TRIANGLES,\r\n              None,\n        [0, 1, 2, 0, 2, 3],\r\n        ('v2i', (x, y,\r\n                 x + width, y,\r\n                 x + width, y + width,\r\n                 x, y + width))\r\n        )\n  batch.draw()", 'y': 67, 'connects': [{'output': {'node': 17, 'put': {'name': 'output'}}, 'input': {'put': {'name': 'window'}}}, {'output': {'node': 25, 'put': {'name': 'output'}}, 'input': {'put': {'name': 'width'}}}, {'output': {'node': 26, 'put': {'name': 'result'}}, 'input': {'put': {'name': 'xx'}}}, {'output': {'node': 26, 'put': {'name': 'result'}}, 'input': {'put': {'name': 'yy'}}}], 'size': (432, 334)}, {'x': 546, 'parent': 19, 'color': (80, 123, 85), 'type': 'node', 'code': 'def sincos(a=0, m=1):\n  si = sin(a)*m\n  ci = cos(a)*m\n  return si, ci', 'y': 341, 'connects': [{'output': {'node': 20, 'put': {'name': 'output'}}, 'input': {'put': {'name': 'm'}}}, {'output': {'node': 23, 'put': {'name': 'result'}}, 'input': {'put': {'name': 'a'}}}], 'size': (300, 150)}, {'x': 611, 'parent': 20, 'type': 'field', 'code': '18', 'y': 425, 'connects': [], 'size': (70, 30)}, {'x': 452, 'parent': 21, 'color': (124, 125, 123), 'type': 'node', 'code': "S['t'] = 0\n\ndef time():\n  S['t'] += G['dt']\n  return S['t']", 'y': 490, 'connects': [], 'size': (300, 150)}, {'x': 131, 'parent': 22, 'type': 'field', 'code': "'''\nThere is example of some graphics stuff\n\n'''", 'y': 507, 'connects': [], 'size': (212, 102)}, {'x': 498, 'parent': 23, 'color': (84, 85, 94), 'type': 'node', 'code': 'def mul(a=0, b=1):\n    result = a * b\n    return result', 'y': 416, 'connects': [{'output': {'node': 21, 'put': {'name': "S['t']"}}, 'input': {'put': {'name': 'a'}}}, {'output': {'node': 24, 'put': {'name': 'output'}}, 'input': {'put': {'name': 'b'}}}], 'size': (300, 150)}, {'x': 539, 'parent': 24, 'type': 'field', 'code': '3.00', 'y': 491, 'connects': [], 'size': (81, 30)}, {'x': 633, 'parent': 25, 'type': 'field', 'code': '17', 'y': 158, 'connects': [{'output': {'node': 30, 'put': {'name': 'result'}}, 'input': {'put': {'name': 'input'}}}], 'size': (70, 30)}, {'x': 493, 'parent': 26, 'color': (117, 90, 80), 'type': 'node', 'code': 'def rangef(f=0, t=100, s=10):\n  result = list(range(f,t,s))\n  return result', 'y': 160, 'connects': [{'output': {'node': 28, 'put': {'name': 'output'}}, 'input': {'put': {'name': 't'}}}, {'output': {'node': 29, 'put': {'name': 'output'}}, 'input': {'put': {'name': 's'}}}, {'output': {'node': 27, 'put': {'name': 'output'}}, 'input': {'put': {'name': 'f'}}}], 'size': (342, 151)}, {'x': 458, 'parent': 27, 'type': 'field', 'code': '45', 'y': 263, 'connects': [], 'size': (70, 30)}, {'x': 555, 'parent': 28, 'type': 'field', 'code': '520', 'y': 262, 'connects': [], 'size': (81, 30)}, {'x': 655, 'parent': 29, 'type': 'field', 'code': '23', 'y': 262, 'connects': [], 'size': (70, 30)}, {'x': 753, 'parent': 30, 'color': (122, 86, 109), 'type': 'node', 'code': 'def toInt(a=0):\n  result = int(a)\n  return result', 'y': 263, 'connects': [{'output': {'node': 19, 'put': {'name': 'ci'}}, 'input': {'put': {'name': 'a'}}}], 'size': (300, 150)}]