[{'size': (272, 52), 'parent': 16, 'connects': [], 'x': 179, 'type': 'field', 'code': 'import pyglet\nfrom math import sin, cos', 'y': 317}, {'size': (292, 30), 'parent': 17, 'connects': [], 'x': 401, 'type': 'field', 'code': 'pyglet.window.Window(550,550)', 'y': 545}, {'size': (432, 334), 'parent': 18, 'connects': [{'input': {'put': {'name': 'window'}}, 'output': {'node': 17, 'put': {'name': 'output'}}}, {'input': {'put': {'name': 'width'}}, 'output': {'node': 25, 'put': {'name': 'output'}}}, {'input': {'put': {'name': 'xx'}}, 'output': {'node': 26, 'put': {'name': 'result'}}}, {'input': {'put': {'name': 'yy'}}, 'output': {'node': 26, 'put': {'name': 'result'}}}], 'x': 449, 'color': (99, 114, 116), 'type': 'node', 'code': "def quad(window=None, xx=[], yy=[], width=10):\n  window.switch_to()\n  window.clear()\n  batch = pyglet.graphics.Batch()\n  for x in xx:\n    for y in yy:\n      x, y = int(x), int(y)\n      batch.add_indexed(4, \n              pyglet.gl.GL_TRIANGLES,\r\n              None,\n        [0, 1, 2, 0, 2, 3],\r\n        ('v2i', (x, y,\r\n                 x + width, y,\r\n                 x + width, y + width,\r\n                 x, y + width))\r\n        )\n  batch.draw()", 'y': 67}, {'size': (300, 150), 'parent': 19, 'connects': [{'input': {'put': {'name': 'm'}}, 'output': {'node': 20, 'put': {'name': 'output'}}}, {'input': {'put': {'name': 'a'}}, 'output': {'node': 23, 'put': {'name': 'result'}}}], 'x': 546, 'color': (80, 123, 85), 'type': 'node', 'code': 'def sincos(a=0, m=1):\n  si = sin(a)*m\n  ci = cos(a)*m\n  return si, ci', 'y': 341}, {'size': (70, 30), 'parent': 20, 'connects': [], 'x': 611, 'type': 'field', 'code': '18', 'y': 425}, {'size': (300, 150), 'parent': 21, 'connects': [], 'x': 452, 'color': (124, 125, 123), 'type': 'node', 'code': "def time():\n  try:\n    S['t'] += G['dt']\n  except:\n    S['t'] = 0\n  return S['t']", 'y': 490}, {'size': (212, 102), 'parent': 22, 'connects': [], 'x': 131, 'type': 'field', 'code': "'''\nThere is example of some graphics stuff\n\n'''", 'y': 507}, {'size': (300, 150), 'parent': 23, 'connects': [{'input': {'put': {'name': 'a'}}, 'output': {'node': 21, 'put': {'name': "S['t']"}}}, {'input': {'put': {'name': 'b'}}, 'output': {'node': 24, 'put': {'name': 'output'}}}], 'x': 498, 'color': (84, 85, 94), 'type': 'node', 'code': 'def mul(a=0, b=1):\n    result = a * b\n    return result', 'y': 416}, {'size': (81, 30), 'parent': 24, 'connects': [], 'x': 539, 'type': 'field', 'code': '3.00', 'y': 491}, {'size': (70, 30), 'parent': 25, 'connects': [{'input': {'put': {'name': 'input'}}, 'output': {'node': 30, 'put': {'name': 'result'}}}], 'x': 633, 'type': 'field', 'code': '11', 'y': 158}, {'size': (342, 151), 'parent': 26, 'connects': [{'input': {'put': {'name': 't'}}, 'output': {'node': 28, 'put': {'name': 'output'}}}, {'input': {'put': {'name': 's'}}, 'output': {'node': 29, 'put': {'name': 'output'}}}, {'input': {'put': {'name': 'f'}}, 'output': {'node': 27, 'put': {'name': 'output'}}}], 'x': 493, 'color': (117, 90, 80), 'type': 'node', 'code': 'def rangef(f=0, t=100, s=10):\n  result = list(range(f,t,s))\n  return result', 'y': 160}, {'size': (70, 30), 'parent': 27, 'connects': [], 'x': 458, 'type': 'field', 'code': '45', 'y': 263}, {'size': (81, 30), 'parent': 28, 'connects': [], 'x': 555, 'type': 'field', 'code': '520', 'y': 262}, {'size': (70, 30), 'parent': 29, 'connects': [], 'x': 655, 'type': 'field', 'code': '23', 'y': 262}, {'size': (300, 150), 'parent': 30, 'connects': [{'input': {'put': {'name': 'a'}}, 'output': {'node': 19, 'put': {'name': 'ci'}}}], 'x': 753, 'color': (122, 86, 109), 'type': 'node', 'code': 'def toInt(a=0):\n  result = int(a)\n  return result', 'y': 263}]