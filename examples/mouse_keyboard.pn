[{'parent': 16, 'size': (180, 30), 'code': 'import pyglet', 'connects': [], 'y': 409, 'type': 'field', 'x': 110}, {'parent': 17, 'size': (436, 293), 'code': "def box(pos=[0, 0]):\n  x, y = int(pos[0]), int(pos[1])\n  box = pyglet.graphics.vertex_list_indexed(4,\n      [0, 1, 2, 0, 2, 3],\r\n      ('v2i', (x,      y,\r\n               x + 50, y,\r\n               x + 50, y +50,\r\n               x,      y + 50))\r,\n      ('c3B', (255, 100, 0)*4)\n    )\n  return box", 'connects': [{'input': {'put': {'name': 'pos'}}, 'output': {'put': {'name': "S['position']"}, 'node': 21}}], 'y': 158, 'type': 'node', 'x': 495, 'color': (99, 114, 116)}, {'parent': 18, 'size': (250, 107), 'code': "'''\nGetting keyboard and mouse events from window\n\n'''", 'connects': [], 'y': 523, 'type': 'field', 'x': 143}, {'parent': 19, 'size': (447, 398), 'code': "G['key'] = []\n\ndef keyboard(window=0):\n\n  @window.event\n  def on_key_press(symbol, mod):\n    G['key'].append(symbol)\n\n  @window.event\n  def on_key_release(symbol, mod):\n    if symbol in G['key']:\n      G['key'].pop(G['key'].index(symbol))\n\n  @window.event\n  def on_deactivate():\n    G['key'] = []\n\n  return G['key']", 'connects': [{'input': {'put': {'name': 'window'}}, 'output': {'put': {'name': "G['window']"}, 'node': 27}}], 'y': 435, 'type': 'node', 'x': 495, 'color': (93, 93, 89)}, {'parent': 20, 'size': (140, 30), 'code': '[]', 'connects': [{'input': {'put': {'name': 'input'}}, 'output': {'put': {'name': "G['key']"}, 'node': 19}}], 'y': 359, 'type': 'field', 'x': 629}, {'parent': 21, 'size': (629, 307), 'code': "S['position'] = [20, 20]\n\ndef position(key=[]):\n\n  key = list(map(lambda x: pyglet.window.key.symbol_string(x), key))\n\n  if 'UP' in key:\n    S['position'][1] += 1\n  if 'DOWN' in key:\n    S['position'][1] -= 1\n  if 'RIGHT' in key:\n    S['position'][0] += 1\n  if 'LEFT' in key:\n    S['position'][0] -= 1\n  return S['position']", 'connects': [{'input': {'put': {'name': 'key'}}, 'output': {'put': {'name': "G['key']"}, 'node': 19}}], 'y': 297, 'type': 'node', 'x': 495, 'color': (101, 91, 127)}, {'parent': 22, 'size': (132, 30), 'code': '[150, 231]', 'connects': [{'input': {'put': {'name': 'input'}}, 'output': {'put': {'name': "S['position']"}, 'node': 21}}], 'y': 222, 'type': 'field', 'x': 636}, {'parent': 23, 'size': (326, 214), 'code': "G['mouse_pos'] = [0,0]\n\ndef mouse(window=0):\n  @window.event\n  def on_mouse_motion(x, y, \n                    dx, dy):\n    G['mouse_pos'] = [x, y]\n  return G['mouse_pos']", 'connects': [{'input': {'put': {'name': 'window'}}, 'output': {'put': {'name': "G['window']"}, 'node': 27}}], 'y': 331, 'type': 'node', 'x': 337, 'color': (80, 81, 92)}, {'parent': 24, 'size': (124, 30), 'code': '[288, 166]', 'connects': [{'input': {'put': {'name': 'input'}}, 'output': {'put': {'name': "G['mouse_pos']"}, 'node': 23}}], 'y': 248, 'type': 'field', 'x': 250}, {'parent': 25, 'size': (425, 281), 'code': "def box(pos=[0, 0]):\n  x, y = int(pos[0]), int(pos[1])\n  box = pyglet.graphics.vertex_list_indexed(4,\n      [0, 1, 2, 0, 2, 3],\r\n      ('v2i', (x,      y,\r\n               x + 50, y,\r\n               x + 50, y +50,\r\n               x,      y + 50))\r,\n      ('c3B', (100, 255, 0)*4)\n    )\n  return box", 'connects': [{'input': {'put': {'name': 'pos'}}, 'output': {'put': {'name': "G['mouse_pos']"}, 'node': 23}}], 'y': 153, 'type': 'node', 'x': 337, 'color': (99, 114, 116)}, {'parent': 26, 'size': (307, 150), 'code': "def render(a=0, b=0, clear=True):\n  window = G['window']\n  window.switch_to()\n  if clear:\n    window.clear()\n  a.draw(pyglet.gl.GL_TRIANGLES)\n  b.draw(pyglet.gl.GL_TRIANGLES)\n  ", 'connects': [{'input': {'put': {'name': 'a'}}, 'output': {'put': {'name': 'box'}, 'node': 25}}, {'input': {'put': {'name': 'b'}}, 'output': {'put': {'name': 'box'}, 'node': 17}}, {'input': {'put': {'name': 'clear'}}, 'output': {'put': {'name': 'output'}, 'node': 28}}], 'y': 46, 'type': 'node', 'x': 495, 'color': (127, 96, 112)}, {'parent': 27, 'size': (392, 166), 'code': "G['window'] = pyglet.window.Window(300,300)\n\ndef create_window():\n  return G['window']", 'connects': [], 'y': 545, 'type': 'node', 'x': 439, 'color': (129, 105, 124)}, {'parent': 28, 'size': (70, 30), 'code': '1', 'connects': [], 'y': 116, 'type': 'field', 'x': 584}]