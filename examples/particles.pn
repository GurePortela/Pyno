[{'type': 'field', 'x': 197, 'y': 188, 'size': (308, 89), 'code': '# Patricles test\n\n# use mouse right and left\n# buttons to interact\n', 'connects': [], 'parent': 1}, {'type': 'node', 'x': 260, 'y': 513, 'size': (433, 162), 'color': (129, 105, 124), 'code': "import pyglet\n\nS['window'] = pyglet.window.Window(450, 450)\n\ndef create_window():\n  return S['window']\n\ncall = create_window", 'connects': [], 'parent': 2}, {'type': 'node', 'x': 542, 'y': 224, 'size': (509, 487), 'color': (99, 114, 116), 'code': "import pyglet\n\nS['rects'] = []\nS['batch'] = None\n\ndef draw_rects(poses=[(0,0),(10,10),(30,30)]):\n\n  # make new array of rects if count not match\n  count = len(poses)\n  if len(S['rects']) != count:\n    S['rects'] = []\n    S['batch'] = pyglet.graphics.Batch()\n    for i in range(count):\n      S['rects'].append(S['batch'].add(\n                  1, pyglet.gl.GL_POINTS, None,\n                  ('v2i', (0, 0)),\n                  ('c4B', (255,255,255,10))))\n\n  # new poses and sizes\n  for rect, pos in zip(S['rects'], poses):\n    x, y = int(pos[0]), int(pos[1])  \n    rect.vertices = (x, y)\n\n  return S['batch']\n\ncall = draw_rects", 'connects': [{'output': {'node': 4, 'put': {'name': 'result'}}, 'input': {'put': {'name': 'poses'}}}], 'parent': 3}, {'type': 'node', 'x': 542, 'y': 310, 'size': (528, 680), 'color': (86, 111, 98), 'code': "import math\nfrom random import random\n\nS['p'] = []\nS['a'] = []\n\ndef particles(inv=False, magnet=(0,0), count=10):\n  if count != len(S['p']):\n    S['p'] = []\n    S['a'] = []\n    for i in range(count):\n      S['p'].append([225,225])\n      S['a'].append([random()*200-100,\n                     random()*200-100])\n\n  for pos, acc in zip(S['p'], S['a']):\n    dist = math.sqrt((pos[0] - magnet[0])**2 +\n                     (pos[1] - magnet[1])**2)\n    acc[0] *= 0.6\n    acc[1] *= 0.6\n    if not inv:\n      acc[0] += (pos[0] - magnet[0]) / dist * 2\n      acc[1] += (pos[1] - magnet[1]) / dist * 2\n    else:\n      acc[0] -= (pos[0] - magnet[0]) / dist * 2\n      acc[1] -= (pos[1] - magnet[1]) / dist * 2\n    pos[0] += acc[0] / 5\n    pos[1] += acc[1] / 5\n    if not (0 < pos[0] < 450):\n      acc[0] *= -20\n    if not (0 < pos[1] < 450):\n      acc[1] *= -20\n    \n  return S['p']\n\ncall = particles", 'connects': [{'output': {'node': 5, 'put': {'name': 'output'}}, 'input': {'put': {'name': 'count'}}}, {'output': {'node': 7, 'put': {'name': 'result 2'}}, 'input': {'put': {'name': 'magnet'}}}, {'output': {'node': 7, 'put': {'name': 'result 1'}}, 'input': {'put': {'name': 'inv'}}}], 'parent': 4}, {'type': 'field', 'x': 500, 'y': 506, 'size': (98, 30), 'code': '1024', 'connects': [], 'parent': 5}, {'type': 'node', 'x': 494, 'y': 140, 'size': (317, 178), 'color': (103, 92, 84), 'code': 'def draw_batch(window=None,\n               trail=False,\n               batch=None):\n  window.switch_to()\n  if not trail:\n    window.clear()\n  batch.draw()\n\ncall = draw_batch', 'connects': [{'output': {'node': 2, 'put': {'name': 'result'}}, 'input': {'put': {'name': 'window'}}}, {'output': {'node': 3, 'put': {'name': 'result'}}, 'input': {'put': {'name': 'batch'}}}, {'output': {'node': 7, 'put': {'name': 'result 0'}}, 'input': {'put': {'name': 'trail'}}}], 'parent': 6}, {'type': 'node', 'x': 373, 'y': 438, 'size': (568, 697), 'color': (80, 81, 92), 'code': "from typing import *\nfrom pyglet.window.mouse import *\n\nG['mouse_pos'] = [0,0]\nG['click'] = False\nG['rclick'] = False\n\ndef mouse(window=0) -> Tuple[Any, Any, Any]:\n  @window.event\n  def on_mouse_motion(x, y, \n                      dx, dy):\n    G['mouse_pos'] = x, y\n\n  @window.event\n  def on_mouse_drag(x, y, dx, dy, \n                    buttons, modifiers):\n    G['mouse_pos'] = x, y\n\n  @window.event\n  def on_mouse_press(x, y, \n                     button, modifiers):\n    if button & LEFT:\n      G['click'] = True\n    elif button & RIGHT:\n      G['rclick'] = True\n\n  @window.event\n  def on_mouse_release(x, y, \n                       button, modifiers):\n    if button & LEFT:\n      G['click'] = False\n    elif button & RIGHT:\n      G['rclick'] = False\n\n  return G['rclick'], G['click'], G['mouse_pos']\n\ncall = mouse", 'connects': [{'output': {'node': 2, 'put': {'name': 'result'}}, 'input': {'put': {'name': 'window'}}}], 'parent': 7}, {'type': 'field', 'x': 672, 'y': 505, 'size': (221, 30), 'code': '# number of particles', 'connects': [], 'parent': 8}]