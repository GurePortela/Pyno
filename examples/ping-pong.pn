[{'parent': 16, 'y': 368, 'connects': [], 'size': (180, 30), 'code': 'import pyglet', 'type': 'field', 'x': 103}, {'color': (99, 114, 116), 'parent': 17, 'y': 89, 'connects': [{'output': {'put': {'name': 'S'}, 'node': 21}, 'input': {'put': {'name': 'pad'}}}], 'size': (436, 293), 'code': "def pad_draw(pad={}):\n  pos  = pad['position']\n  size = pad['size']\n  x, y = int(pos[0]), int(pos[1])\n  box = pyglet.graphics.vertex_list_indexed(4,\n      [0, 1, 2, 0, 2, 3],\r\n      ('v2i', (x,           y,\r\n               x + size[0], y,\r\n               x + size[0], y + size[1],\r\n               x,           y + size[1]))\r,\n      ('c3B', (255,255,255)*4)\n    )\n  return box", 'type': 'node', 'x': 519}, {'parent': 18, 'y': 504, 'connects': [], 'size': (256, 169), 'code': "'''\nLittle ping-pong game\nKeys:\n    upper pad:\n        A    D\n    bottom pad:\n        LEFT RIGHT\n'''", 'type': 'field', 'x': 139}, {'color': (93, 93, 89), 'parent': 19, 'y': 461, 'connects': [{'output': {'put': {'name': "G['window']"}, 'node': 23}, 'input': {'put': {'name': 'window'}}}], 'size': (408, 395), 'code': "G['key'] = []\n\ndef keyboard(window=0):\n\n  @window.event\n  def on_key_press(symbol, mod):\n    G['key'].append(symbol)\n\n  @window.event\n  def on_key_release(symbol, mod):\n    if symbol in G['key']:\n      G['key'].pop(G['key'].index(symbol))\n\n  @window.event\n  def on_deactivate():\n    G['key'] = []\n\n  return G['key']", 'type': 'node', 'x': 481}, {'parent': 20, 'y': 249, 'connects': [{'output': {'put': {'name': 'keys'}, 'node': 26}, 'input': {'put': {'name': 'input'}}}], 'size': (110, 118), 'code': '[]', 'type': 'field', 'x': 176}, {'color': (101, 91, 127), 'parent': 21, 'y': 265, 'connects': [{'output': {'put': {'name': 'keys'}, 'node': 26}, 'input': {'put': {'name': 'key'}}}], 'size': (477, 301), 'code': "w = G['window']\nS['size'] = [70, 10]\nS['position'] = [w.width/2 - S['size'][0]/2, 20]\n\ndef pad_bottom(key=[]):\n  speed = G['dt'] * 200\n\n  if 'RIGHT' in key:\n    if S['position'][0] < w.width - S['size'][0]:\n      S['position'][0] += speed\n  if 'LEFT' in key:\n    if S['position'][0] > 0:\n      S['position'][0] -= speed\n  return S", 'type': 'node', 'x': 523}, {'color': (127, 96, 112), 'parent': 22, 'y': -37, 'connects': [{'output': {'put': {'name': 'box'}, 'node': 17}, 'input': {'put': {'name': 'b'}}}, {'output': {'put': {'name': 'box'}, 'node': 24}, 'input': {'put': {'name': 'a'}}}, {'output': {'put': {'name': 'box'}, 'node': 27}, 'input': {'put': {'name': 'c'}}}], 'size': (376, 172), 'code': "def render(a=0, b=0, c=0, clear=True):\n  window = G['window']\n  window.switch_to()\n  if clear:\n    window.clear()\n  a.draw(pyglet.gl.GL_TRIANGLES)\n  b.draw(pyglet.gl.GL_TRIANGLES)\n  c.draw(pyglet.gl.GL_TRIANGLES)\n  ", 'type': 'node', 'x': 515}, {'color': (129, 105, 124), 'parent': 23, 'y': 545, 'connects': [], 'size': (433, 162), 'code': "G['window'] = pyglet.window.Window(300, 450)\n\ndef create_window():\n  return G['window']", 'type': 'node', 'x': 439}, {'color': (99, 114, 116), 'parent': 24, 'y': 88, 'connects': [{'output': {'put': {'name': 'S'}, 'node': 25}, 'input': {'put': {'name': 'pad'}}}], 'size': (436, 293), 'code': "def pad_draw(pad={}):\n  pos  = pad['position']\n  size = pad['size']\n  x, y = int(pos[0]), int(pos[1])\n  box = pyglet.graphics.vertex_list_indexed(4,\n      [0, 1, 2, 0, 2, 3],\r\n      ('v2i', (x,           y,\r\n               x + size[0], y,\r\n               x + size[0], y + size[1],\r\n               x,           y + size[1]))\r,\n      ('c3B', (255,255,255)*4)\n    )\n  return box", 'type': 'node', 'x': 368}, {'color': (101, 91, 127), 'parent': 25, 'y': 264, 'connects': [{'output': {'put': {'name': 'keys'}, 'node': 26}, 'input': {'put': {'name': 'key'}}}], 'size': (560, 279), 'code': "w = G['window']\nS['size'] = [70, 10]\nS['position'] = [w.width/2 - S['size'][0]/2, w.height - 30]\n\ndef pad_upper(key=[]):\n  speed = G['dt'] * 200\n\n  if 'D' in key:\n    if S['position'][0] < w.width - S['size'][0]:\n      S['position'][0] += speed\n  if 'A' in key:\n    if S['position'][0] > 0:\n      S['position'][0] -= speed\n  return S", 'type': 'node', 'x': 367}, {'color': (81, 121, 111), 'parent': 26, 'y': 377, 'connects': [{'output': {'put': {'name': "G['key']"}, 'node': 19}, 'input': {'put': {'name': 'keys'}}}], 'size': (715, 151), 'code': 'def keys_to_names(keys=[]):\n  keys = list(map(lambda x: pyglet.window.key.symbol_string(x), keys))\n  return keys', 'type': 'node', 'x': 444}, {'color': (99, 114, 116), 'parent': 27, 'y': 47, 'connects': [{'output': {'put': {'name': 'S'}, 'node': 28}, 'input': {'put': {'name': 'ball'}}}], 'size': (436, 293), 'code': "def ball_draw(ball={}):\n  pos  = ball['position']\n  size = ball['size']\n  x, y = int(pos[0]), int(pos[1])\n  box = pyglet.graphics.vertex_list_indexed(4,\n      [0, 1, 2, 0, 2, 3],\r\n      ('v2i', (x,           y,\r\n               x + size[0], y,\r\n               x + size[0], y + size[1],\r\n               x,           y + size[1]))\r,\n      ('c3B', (255,100,50)*4)\n    )\n  return box", 'type': 'node', 'x': 668}, {'color': (101, 91, 127), 'parent': 28, 'y': 136, 'connects': [{'output': {'put': {'name': 'S'}, 'node': 25}, 'input': {'put': {'name': 'pad_u'}}}, {'output': {'put': {'name': 'S'}, 'node': 21}, 'input': {'put': {'name': 'pad_b'}}}], 'size': (562, 680), 'code': "w = G['window']\nS['position'] = [w.width // 2, w.height // 2]\nS['size'] = [10, 10]\nS['acc'] = [2, 1]\n\ndef ball(pad_u={}, pad_b={}):\n  speed = G['dt'] * 60\n  pos = S['position']\n\n  # OUT OF GAME\n  if (pos[1] > w.height) or (pos[1] < -S['size'][0]):\n    S['position'] = [w.width // 2, w.height // 2]\n    S['acc'][1] *= -1\n\n  # WALLS COLLISION\n  if pos[0] < w.width - S['size'][0]:\n    S['acc'][0] *= -1\n  if pos[0] > 0:\n    S['acc'][0] *= -1\n\n  # PADS COLLISION  \n  pu, su = pad_u['position'], pad_u['size']\n  if ((pu[1] > pos[1] > pu[1] - su[1]) and\n      (pu[0] < pos[0] < pu[0] + su[0])):\n    S['acc'][1] *= -1\n\n  pu, su = pad_b['position'], pad_b['size']\n  if ((pu[1] < pos[1] < pu[1] + su[1]) and\n      (pu[0] < pos[0] < pu[0] + su[0])):\n    S['acc'][1] *= -1\n\n  # MOVEMENT\n  S['position'][0] += S['acc'][0] * speed\n  S['position'][1] += S['acc'][1] * speed\n\n  return S", 'type': 'node', 'x': 667}]