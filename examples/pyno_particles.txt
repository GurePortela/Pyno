[{'type': 'node', 'x': -118, 'parent': 1, 'y': -477, 'connects': [{'output': {'node': 9, 'put': {'name': 'x'}}, 'input': {'put': {'name': 'x'}}}, {'output': {'node': 9, 'put': {'name': 'y'}}, 'input': {'put': {'name': 'y'}}}, {'output': {'node': 16, 'put': {'name': 'output'}}, 'input': {'put': {'name': 'size'}}}, {'output': {'node': 17, 'put': {'name': 'result'}}, 'input': {'put': {'name': 'color'}}}, {'output': {'node': 2, 'put': {'name': 'window'}}, 'input': {'put': {'name': 'window'}}}], 'color': (70, 180, 70), 'size': (540, 321), 'code': "#color(70,180,70)\ndef quad(window=None, x=[], y=[], size=10, color=None):\n    batch = pgl.graphics.Batch()\n    if color is None:\n        color = (100, 100, 100)\n    for x,y in zip(x,y):\n        x = int(x)\n        y = int(y)\n        batch.add_indexed(4, pgl.gl.GL_TRIANGLES,\r None,\n        [0, 1, 2, 0, 2, 3],\r\n        ('v2i', (-size+x, -size+y,\r\n                 size+x, -size+y,\r\n                 size+x, size+y,\r\n                 -size+x, size+y))\r,\n        ('c3b', color*4)\n        )\n    batch.draw()"}, {'type': 'node', 'x': -175, 'parent': 2, 'y': 528, 'connects': [], 'color': (120, 70, 120), 'size': (510, 243), 'code': "#color(120,70,120)\nimport pyglet as pgl\ndef createWindow():\n    try: \n        S['w'].clear()      \n        window = S['w']\n    except:\n        S['w'] = pgl.window.Window(resizable=True)\n        S['w'].activate()\n    return window\n    "}, {'type': 'node', 'x': 138, 'parent': 3, 'y': 391, 'connects': [{'output': {'node': 2, 'put': {'name': 'window'}}, 'input': {'put': {'name': 'window'}}}], 'color': (120, 70, 120), 'size': (300, 150), 'code': '#color(120,70,120)\ndef getWindowSize(window=None):\n    width = window.width\n    height = window.height\n    return width, height'}, {'type': 'node', 'x': 136, 'parent': 4, 'y': -57, 'connects': [{'output': {'node': 7, 'put': {'name': 'output'}}, 'input': {'put': {'name': 'enable'}}}, {'output': {'node': 13, 'put': {'name': 'result'}}, 'input': {'put': {'name': 'value'}}}, {'output': {'node': 14, 'put': {'name': 'a'}}, 'input': {'put': {'name': 'array'}}}], 'color': (70, 70, 180), 'size': (443, 166), 'code': '#color(70,70,180)\ndef appendToArray(value=0, array=[], enable=0):\n    if enable > 0:\n        array.append(value)\n    return array'}, {'type': 'node', 'x': 344, 'parent': 5, 'y': 332, 'connects': [], 'color': (100, 100, 100), 'size': (300, 150), 'code': "#color(100,100,100)\ndef getValue(name='none'):\n    result = G[name]\n    return result"}, {'type': 'node', 'x': 366, 'parent': 6, 'y': -200, 'connects': [{'output': {'node': 4, 'put': {'name': 'array'}}, 'input': {'put': {'name': 'value'}}}], 'color': (100, 100, 100), 'size': (355, 150), 'code': "#color(100,100,100)\ndef setValue(value=[], name='none'):\n    G[name] = value"}, {'type': 'field', 'x': 304, 'parent': 7, 'code': '-24', 'connects': [], 'y': 40, 'size': (82, 30)}, {'type': 'node', 'x': 18, 'parent': 8, 'y': -155, 'connects': [{'output': {'node': 4, 'put': {'name': 'array'}}, 'input': {'put': {'name': 'a'}}}], 'color': (70, 70, 180), 'size': (300, 150), 'code': '#color(70,70,180)\ndef getPos(a=[]):\n    result = []\n    for i in a:\n        result.append(i[0])\n    return result'}, {'type': 'node', 'x': 13, 'parent': 9, 'y': -242, 'connects': [{'output': {'node': 8, 'put': {'name': 'result'}}, 'input': {'put': {'name': 'a'}}}], 'color': (70, 70, 180), 'size': (300, 150), 'code': '#color(70,70,180)\ndef getXY(a=[]):\n    x = []\n    y = []\n    for i in a:\n        x.append(i[0])\n        y.append(i[1])\n    return x, y'}, {'type': 'node', 'x': 445, 'parent': 10, 'y': 207, 'connects': [{'output': {'node': 5, 'put': {'name': 'result'}}, 'input': {'put': {'name': 'a'}}}], 'color': (70, 70, 180), 'size': (300, 150), 'code': '#color(70,70,180)\ndef count(a=[]):\n    return len(a)'}, {'type': 'field', 'x': 445, 'parent': 11, 'code': '9', 'connects': [{'output': {'node': 10, 'put': {'name': 'len(a)'}}, 'input': {'put': {'name': 'input'}}}], 'y': 124, 'size': (70, 30)}, {'type': 'node', 'x': 264, 'parent': 12, 'y': 207, 'connects': [{'output': {'node': 5, 'put': {'name': 'result'}}, 'input': {'put': {'name': 'a'}}}], 'color': (180, 70, 70), 'size': (336, 196), 'code': '#color(180,70,70)\ndef clacPos(a=[]):\n    a = a[:]\n    for i in a:\n        pos = i[0]\n        vel = i[1]\n        pos[0] = pos[0] + vel[0]\n        pos[1] = pos[1] + vel[1]\n    return a'}, {'type': 'node', 'x': -57, 'parent': 13, 'y': 176, 'connects': [{'output': {'node': 15, 'put': {'name': 'output'}}, 'input': {'put': {'name': 'speed'}}}], 'color': (70, 120, 70), 'size': (384, 184), 'code': '#color(70,120,70)\nimport random\ndef newParticle(speed=1):\n    result = [\n              [10,10],\n              [random.random()*speed,\n               random.random()*speed]\n             ]\n    return result'}, {'type': 'node', 'x': 162, 'parent': 14, 'y': 75, 'connects': [{'output': {'node': 3, 'put': {'name': 'height'}}, 'input': {'put': {'name': 'y'}}}, {'output': {'node': 12, 'put': {'name': 'a'}}, 'input': {'put': {'name': 'a'}}}, {'output': {'node': 3, 'put': {'name': 'width'}}, 'input': {'put': {'name': 'x'}}}], 'color': (180, 70, 70), 'size': (373, 227), 'code': '#color(180,70,70)\ndef boundsCheck(x=100, y=100, a=[]):\n    a = a[:]\n    for i in a:\n        pos = i[0]\n        vel = i[1]\n        if 0 > pos[0] or pos[0] > x:\n            vel[0] *= -1\n        elif 0 > pos[1] or pos[1] > y:\n            vel[1] *= -1\n    return a'}, {'type': 'field', 'x': -51, 'parent': 15, 'code': '4', 'connects': [], 'y': 291, 'size': (70, 30)}, {'type': 'field', 'x': 91, 'parent': 16, 'code': '6', 'connects': [], 'y': -351, 'size': (70, 30)}, {'type': 'node', 'x': 213, 'parent': 17, 'y': -354, 'connects': [{'output': {'node': 18, 'put': {'name': 'output'}}, 'input': {'put': {'name': 'r'}}}, {'output': {'node': 19, 'put': {'name': 'output'}}, 'input': {'put': {'name': 'g'}}}, {'output': {'node': 20, 'put': {'name': 'output'}}, 'input': {'put': {'name': 'b'}}}], 'color': (170, 70, 70), 'size': (300, 150), 'code': '#color(170,70,70)\ndef color(r=100, g=100, b=100):\n    result = (r,g,b)\n    return result'}, {'type': 'field', 'x': 154, 'parent': 18, 'code': '125', 'connects': [], 'y': -268, 'size': (78, 30)}, {'type': 'field', 'x': 214, 'parent': 19, 'code': '56', 'connects': [], 'y': -199, 'size': (74, 30)}, {'type': 'field', 'x': 258, 'parent': 20, 'code': '25', 'connects': [], 'y': -263, 'size': (74, 30)}, {'type': 'node', 'x': -353, 'parent': 21, 'y': 370, 'connects': [{'output': {'node': 2, 'put': {'name': 'window'}}, 'input': {'put': {'name': 'w'}}}], 'color': (118, 88, 102), 'size': (474, 329), 'code': "from pyglet.window import key\ndef keyboard(w=None):\n    try: \n        S['keys']\n        keys = S['keys']\n    except:\n        S['keys'] = []\n\n    @w.event\n    def on_key_press(s, m):\n        keys.append(s)\n    @w.event\n    def on_key_release(s, m):\n        del keys[keys.index(s)]\n\n    return keys\n    "}, {'type': 'field', 'x': -241, 'parent': 22, 'code': '[]', 'connects': [{'output': {'node': 21, 'put': {'name': 'keys'}}, 'input': {'put': {'name': 'input'}}}], 'y': 259, 'size': (86, 120)}, {'type': 'node', 'x': -353, 'parent': 23, 'y': 199, 'connects': [{'output': {'node': 21, 'put': {'name': 'keys'}}, 'input': {'put': {'name': 'keys'}}}], 'color': (108, 86, 91), 'size': (316, 183), 'code': "from pyglet.window import key\ndef key_pressed(keys=[]):\n    result = 'none'\n    if key.A in keys:\n        result = 'left'\n    elif key.D in keys:\n        result = 'right'\n    return result"}, {'type': 'field', 'x': -355, 'parent': 24, 'code': "'none'", 'connects': [{'output': {'node': 23, 'put': {'name': 'result'}}, 'input': {'put': {'name': 'input'}}}], 'y': 104, 'size': (120, 30)}]