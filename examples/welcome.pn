[{'color': (100, 130, 117), 'connects': [{'output': {'put': {'name': 'output'}, 'node': 19}, 'input': {'put': {'name': 'b'}}}, {'output': {'put': {'name': 'output'}, 'node': 17}, 'input': {'put': {'name': 'a'}}}], 'parent': 16, 'size': (300, 150), 'code': 'def add(a=0, b=0):\n  result = a + b\n  return result\n\ncall = add', 'x': 557, 'type': 'node', 'y': 411}, {'connects': [], 'parent': 17, 'size': (70, 30), 'code': '5', 'x': 499, 'type': 'field', 'y': 520}, {'connects': [], 'parent': 18, 'size': (350, 496), 'code': '#\n#         Welcome to Pyno!\n#\n#  Pyno is a visual programming env\n# based on Python\n#\n#  You can find info and tutorials\n# at https://github.com/honix/Pyno\n#\n#\n#         Basic controls\n#\n# Create - Node   press N\n#        - Field  press F\n#\n# Pan    - right-mouse-button drag\n#\n# Zoom   - mouse wheel\n#\n#    ____\n#   |  _ \\ _   _  ____   ___\n#   | (_) ) | | ||  _ \\ / _ \\\n#   |  __/| |_| || | | | (_) )\n#   |_|   \\___  ||_| |_|\\___/\n#          (___/\n#', 'x': 202, 'type': 'field', 'y': 327}, {'connects': [], 'parent': 19, 'size': (70, 30), 'code': '20', 'x': 618, 'type': 'field', 'y': 521}, {'connects': [{'output': {'put': {'name': 'result'}, 'node': 16}, 'input': {'put': {'name': 'input'}}}], 'parent': 20, 'size': (70, 30), 'code': '25', 'x': 481, 'type': 'field', 'y': 291}, {'color': (116, 127, 128), 'connects': [{'output': {'put': {'name': 'output'}, 'node': 22}, 'input': {'put': {'name': 'b'}}}, {'output': {'put': {'name': 'result'}, 'node': 16}, 'input': {'put': {'name': 'a'}}}], 'parent': 21, 'size': (300, 150), 'code': 'def devide(a=0, b=1):\n  result = a // b\n  return result\n\ncall = devide', 'x': 640, 'type': 'node', 'y': 286}, {'connects': [], 'parent': 22, 'size': (70, 30), 'code': '5', 'x': 696, 'type': 'field', 'y': 409}, {'connects': [{'output': {'put': {'name': 'result'}, 'node': 21}, 'input': {'put': {'name': 'input'}}}], 'parent': 23, 'size': (70, 30), 'code': '5', 'x': 640, 'type': 'field', 'y': 168}, {'connects': [], 'parent': 24, 'size': (170, 30), 'code': 'lambda x: x - 5', 'x': 1038, 'type': 'field', 'y': 485}, {'connects': [], 'parent': 25, 'size': (129, 30), 'code': 'range(1,10)', 'x': 1336, 'type': 'field', 'y': 481}, {'color': (84, 114, 81), 'connects': [{'output': {'put': {'name': 'output'}, 'node': 25}, 'input': {'put': {'name': 'b'}}}, {'output': {'put': {'name': 'output'}, 'node': 24}, 'input': {'put': {'name': 'a'}}}], 'parent': 26, 'size': (300, 150), 'code': 'def outOfFunction(a=None, b=()):\n    result = tuple(map(a,b))\n    return result\n\ncall = outOfFunction', 'x': 1193, 'type': 'node', 'y': 343}, {'connects': [{'output': {'put': {'name': 'result'}, 'node': 26}, 'input': {'put': {'name': 'input'}}}], 'parent': 27, 'size': (328, 30), 'code': '(-4, -3, -2, -1, 0, 1, 2, 3, 4)', 'x': 1159, 'type': 'field', 'y': 246}, {'color': (126, 120, 86), 'connects': [], 'parent': 28, 'size': (300, 219), 'code': "S['timer'] = 0\n\ndef timeSinus():\n  import math\n\n  S['timer'] += G['dt']\n  result = math.sin(S['timer'])\n  return result\n\ncall = timeSinus\n", 'x': 853, 'type': 'node', 'y': 137}, {'connects': [{'output': {'put': {'name': 'result'}, 'node': 28}, 'input': {'put': {'name': 'input'}}}], 'parent': 29, 'size': (224, 30), 'code': '0.531875163027895', 'x': 890, 'type': 'field', 'y': 43}, {'connects': [], 'parent': 30, 'size': (326, 52), 'code': '# Check examples folder for more', 'x': 1664, 'type': 'field', 'y': 293}, {'color': (121, 91, 120), 'connects': [{'output': {'put': {'name': 'output'}, 'node': 32}, 'input': {'put': {'name': 'x'}}}], 'parent': 31, 'size': (300, 150), 'code': 'call = lambda x: x', 'x': 1674, 'type': 'node', 'y': 506}, {'connects': [], 'parent': 32, 'size': (70, 30), 'code': 'None\n', 'x': 1662, 'type': 'field', 'y': 584}, {'connects': [{'output': {'put': {'name': 'result'}, 'node': 31}, 'input': {'put': {'name': 'input'}}}], 'parent': 33, 'size': (70, 30), 'code': 'None', 'x': 1657, 'type': 'field', 'y': 427}]