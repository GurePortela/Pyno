[{'size': (300, 150), 'code': 'def add(a=0, b=0):\n  result = a + b\n  return result', 'parent': 1, 'y': 411, 'x': 556, 'color': (100, 130, 117), 'connects': [{'input': {'put': {'name': 'a'}}, 'output': {'put': {'name': 'output'}, 'node': 2}}, {'input': {'put': {'name': 'b'}}, 'output': {'put': {'name': 'output'}, 'node': 4}}], 'type': 'node'}, {'size': (70, 30), 'code': '5', 'parent': 2, 'y': 520, 'x': 499, 'connects': [], 'type': 'field'}, {'size': (350, 198), 'code': "'''\nWelcome to Pyno!\n\nPyno is a visual language based on Python\n\nYou can find info and tutorials at https://github.com/honix/Pyno\n\n'''", 'parent': 3, 'y': 457, 'x': 206, 'connects': [], 'type': 'field'}, {'size': (70, 30), 'code': '20', 'parent': 4, 'y': 521, 'x': 618, 'connects': [], 'type': 'field'}, {'size': (70, 30), 'code': '25', 'parent': 5, 'y': 291, 'x': 481, 'connects': [{'input': {'put': {'name': 'input'}}, 'output': {'put': {'name': 'result'}, 'node': 1}}], 'type': 'field'}, {'size': (300, 150), 'code': 'def devide(a=0, b=0):\n  result = a // b\n  return result', 'parent': 6, 'y': 290, 'x': 640, 'color': (116, 127, 128), 'connects': [{'input': {'put': {'name': 'a'}}, 'output': {'put': {'name': 'result'}, 'node': 1}}, {'input': {'put': {'name': 'b'}}, 'output': {'put': {'name': 'output'}, 'node': 7}}], 'type': 'node'}, {'size': (70, 30), 'code': '5', 'parent': 7, 'y': 409, 'x': 696, 'connects': [], 'type': 'field'}, {'size': (70, 30), 'code': '5', 'parent': 8, 'y': 168, 'x': 640, 'connects': [{'input': {'put': {'name': 'input'}}, 'output': {'put': {'name': 'result'}, 'node': 6}}], 'type': 'field'}, {'size': (170, 30), 'code': 'lambda x: x - 5', 'parent': 9, 'y': 485, 'x': 1038, 'connects': [], 'type': 'field'}, {'size': (129, 30), 'code': 'range(1,10)', 'parent': 10, 'y': 481, 'x': 1336, 'connects': [], 'type': 'field'}, {'size': (300, 150), 'code': 'def outOfFunction(a=None, b=()):\n    result = tuple(map(a,b))\n    return result', 'parent': 11, 'y': 343, 'x': 1193, 'color': (84, 114, 81), 'connects': [{'input': {'put': {'name': 'b'}}, 'output': {'put': {'name': 'output'}, 'node': 10}}, {'input': {'put': {'name': 'a'}}, 'output': {'put': {'name': 'output'}, 'node': 9}}], 'type': 'node'}, {'size': (328, 30), 'code': '(-4, -3, -2, -1, 0, 1, 2, 3, 4)', 'parent': 12, 'y': 246, 'x': 1159, 'connects': [{'input': {'put': {'name': 'input'}}, 'output': {'put': {'name': 'result'}, 'node': 11}}], 'type': 'field'}, {'size': (312, 150), 'code': "S['timer'] = 0\n\ndef timeSinus():\n  S['timer'] += G['dt']\n  result = math.sin(S['timer'])\n  return result", 'parent': 13, 'y': 203, 'x': 135, 'color': (126, 120, 86), 'connects': [], 'type': 'node'}, {'size': (149, 30), 'code': 'import math', 'parent': 14, 'y': 221, 'x': 296, 'connects': [], 'type': 'field'}, {'size': (224, 30), 'code': '0.9697049468436515', 'parent': 15, 'y': 106, 'x': 180, 'connects': [{'input': {'put': {'name': 'input'}}, 'output': {'put': {'name': 'result'}, 'node': 13}}], 'type': 'field'}]